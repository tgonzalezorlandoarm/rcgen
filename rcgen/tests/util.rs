#![cfg(feature = "crypto")]

use time::{Duration, OffsetDateTime};

use rcgen::{BasicConstraints, Certificate, CertificateParams, KeyPair};
use rcgen::{
	CertificateRevocationList, CrlDistributionPoint, CrlIssuingDistributionPoint, CrlScope,
};
use rcgen::{CertificateRevocationListParams, DnType, IsCa, KeyIdMethod};
use rcgen::{KeyUsagePurpose, RevocationReason, RevokedCertParams, SerialNumber};

// Generated by adding `println!("{}", cert.serialize_private_key_pem());`
// to the test_webpki_25519 test and panicing explicitly.
// This is a "v2" key containing the public key as well as the
// private one.
#[allow(unused)]
pub const ED25519_TEST_KEY_PAIR_PEM_V2: &str = r#"
-----BEGIN PRIVATE KEY-----
MFMCAQEwBQYDK2VwBCIEIC2pHJYjFHhK8V7mj6BnHWUVMS4CRolUlDdRXKCtguDu
oSMDIQDrvH/x8Nx9untsuc6ET+ce3w7PSuLY8BLWcHdXDGvkQA==
-----END PRIVATE KEY-----
"#;
// Generated with `openssl genpkey -algorithm ED25519`
// A "v1" key as it doesn't contain the public key (which can be
// derived from the private one)
#[allow(unused)]
pub const ED25519_TEST_KEY_PAIR_PEM_V1: &str = r#"
-----BEGIN PRIVATE KEY-----
MC4CAQAwBQYDK2VwBCIEIDSat0MacDt2fokpnzuBaXvAQR6RJGS9rgIYOU2mZKld
-----END PRIVATE KEY-----
"#;

/*
Generated by: openssl genpkey -algorithm RSA \
 -pkeyopt rsa_keygen_bits:2048 \
 -pkeyopt rsa_keygen_pubexp:65537 | \
 openssl pkcs8 -topk8 -nocrypt -outform pem
*/
#[allow(dead_code)] // Used in some but not all test compilation units.
#[cfg(feature = "pem")]
pub const RSA_TEST_KEY_PAIR_PEM: &str = r#"
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDYjmgyV3/LSizJ
XrYrATZrrPr2Edo8yiOgBLFmi4sgeGdQ5n6nhjTGfBEIP2Ia6z+hbiGOMncabEBc
zkdME+JFYVCSkS7r4ivMOzp2egxLgcPKcerBoXI8DUbHhIR9z89lHiPHDJv3+d0A
c1b9bz9b8OAeZWiQmFvmjpbc2DfhQ2OFx2MwFZCYF196rrXOc6/SR2esZVRrkW22
RBKFTgz6GIA5A/5VWKIISSqEB1gOcMz2iq5987I28+Ez4rcLZ2lB7cZ7TbNxkAwt
0fPL+EuyP7XOzbIj4/kSAlU5xfwNERa3BEuOFro4i5EmSDj+lR5xdRpFnx0j5zOo
zUL2lHG9AgMBAAECggEARpV8DtSIOcmOeYAeXjwB8eyqy+Obv26fV/vPmr3m9glo
m2zVYWMT9pHft1F5d46v6b0MwN1gBsO74sP1Zy2f9b83VN5vbcEFR4cSkiVLtpyw
JV8mBkDKDBrDtCpUSPGgBrRhMvLAL35Ic2oks2w8OYp0clPZVi/i3G4jbA4pgIkt
yB6k79Uhzz2nfZ0VpPORGNsBOl5UK1LkmIhTJ6S0LsLj7XSet9YHR0k0F0/NOSzz
+jMUzfjOPm8M+b3wk9yAQP7qT9Iy3MHbGAad4gNXGu1LqeDRkfmM5pnoG0ASP3+B
IvX2l0ZLeCtg+GRLlGvUVI1HSQHCsuiC6/g2bq7JAQKBgQD3/Eb58VjpdwJYPrg/
srfnC9sKSf5C0Q8YSmkfvOmeD6Vqe0EXRuMyhwTkkVdz04yPiB2j0fXdeB9h16Ic
9HWb/UNGWNpV7Ul1MSHbeu32Xor+5IkqCGgSoMznlt9QPR4PxfIOgO8cVL1HgNAZ
JnBDzhTG0FfY75hqpCDmFGAZwQKBgQDfjhk5aM0yGLYgZfw/K9BrwjctQBWdrps2
4TtkG7Kuj0hsimCdrqJQ5JN8aUM41zDUr3Px1uN5gUAZ3dE9DoGsgj15ZwgVkAMM
E54bfzOqkbh+mRpptIxL4HmHB45vgvz0YljeRoOEQvPF/OSGLti7VIkD4898PFKl
cU+P9m5+/QKBgDi8XTi+AQuZEM5Duz/Hkc+opLqb5zI+RmfWTmrWe9SP29aa0G+U
5lIfFf19SzbSxavpBm7+kHPVEcj+3rYlL+s6bHPhzEIwgcfwL8DZRSxCwSZD/yXA
up7Yb0jk+b6P3RravOCYmxwuPwfm7rVyV+kLczFxZUfauVJcrrI1Iy+BAoGBAJjG
MEDGeSxaLOS5LYgyNg3ePPzkhaEruRDpHUBNmW+npZPfgSVhObXUb2IfQXwvu0Qt
3yuPcgcQKDFFIH/8UOwGWWKE4cZyk1KGeY9K/5D6Yr3JfX5tj08vSX3Y0SMtvhZ4
u0izoZ8abiOIrtdwXlau76/D2ICLbON5Kykz/NE1AoGAId2+pO9p8jBt9l+5jZo7
Rw/mb5icMaG2hqAzs37gUPbpSwQFOmGhQmNM+WvYEvUUuiTxI3AOeEK8Mj+BVB4+
uE3X/fWK/JR9iOzH9OM31Nua8/EJzr7BmUpXeRr4dAtVimeQ+5HY6IgRsFGPKKwv
YPTHy8SWRA2sMII3ArhHJ8A=
-----END PRIVATE KEY-----
"#;

/*
Generated by: openssl genpkey -algorithm RSA \
 -pkeyopt rsa_keygen_bits:4096 \
 -pkeyopt rsa_keygen_pubexp:65537 | \
 openssl pkcs8 -topk8 -nocrypt -outform pem
*/
#[allow(dead_code)] // Used in some but not all test compilation units.
#[cfg(feature = "pem")]
pub const RSA4096_TEST_KEY_PAIR_PEM: &str = r#"
-----BEGIN PRIVATE KEY-----
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
j9OgxbP94psZIbjwth74DBwvM+m3kg==
-----END PRIVATE KEY-----
"#;

pub fn default_params() -> (CertificateParams, KeyPair) {
	let mut params =
		CertificateParams::new(vec!["crabs.crabs".to_string(), "localhost".to_string()]).unwrap();
	params
		.distinguished_name
		.push(DnType::OrganizationName, "Crab widgits SE");
	params
		.distinguished_name
		.push(DnType::CommonName, "Master CA");

	let key_pair = KeyPair::generate().unwrap();
	(params, key_pair)
}

#[allow(unused)] // Used by openssl + x509-parser features.
pub fn test_crl() -> (CertificateRevocationList, Certificate) {
	let (mut issuer, key_pair) = default_params();
	issuer.is_ca = IsCa::Ca(BasicConstraints::Unconstrained);
	issuer.key_usages = vec![
		KeyUsagePurpose::KeyCertSign,
		KeyUsagePurpose::DigitalSignature,
		KeyUsagePurpose::CrlSign,
	];
	let issuer = issuer.self_signed(&key_pair).unwrap();

	let now = OffsetDateTime::now_utc();
	let next_week = now + Duration::weeks(1);
	let revoked_cert = RevokedCertParams {
		serial_number: SerialNumber::from_slice(&[0x00, 0xC0, 0xFF, 0xEE]),
		revocation_time: now,
		reason_code: Some(RevocationReason::KeyCompromise),
		invalidity_date: None,
	};

	let crl = CertificateRevocationListParams {
		this_update: now,
		next_update: next_week,
		crl_number: SerialNumber::from(1234),
		issuing_distribution_point: Some(CrlIssuingDistributionPoint {
			distribution_point: CrlDistributionPoint {
				uris: vec!["http://example.com/crl".to_string()],
			},
			scope: Some(CrlScope::UserCertsOnly),
		}),
		revoked_certs: vec![revoked_cert],
		key_identifier_method: KeyIdMethod::Sha256,
	}
	.signed_by(&issuer, &key_pair)
	.unwrap();

	(crl, issuer)
}

#[allow(unused)] // Used by openssl + x509-parser features.
pub fn cert_with_crl_dps() -> Vec<u8> {
	let (mut params, key_pair) = default_params();
	params.crl_distribution_points = vec![
		CrlDistributionPoint {
			uris: vec![
				"http://example.com/crl.der".to_string(),
				"http://crls.example.com/1234".to_string(),
			],
		},
		CrlDistributionPoint {
			uris: vec!["ldap://example.com/crl.der".to_string()],
		},
	];

	params.self_signed(&key_pair).unwrap().der().to_vec()
}
